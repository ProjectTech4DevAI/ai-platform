name: Deploy AI Platform to ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write


    steps:
      - name: checkout the repo
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::024209611402:role/github-action-role
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Push Docker Images
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY_BASE: ${{ github.event.repository.name }}-staging
        run: |
          # Build and push main backend
          docker build -t $REGISTRY/$REPOSITORY_BASE-repo:latest ./backend
          docker push $REGISTRY/$REPOSITORY_BASE-repo:latest
          
          # Build and push high priority celery workers
          docker build -f ./backend/Dockerfile.celery-high -t $REGISTRY/$REPOSITORY_BASE-celery-high:latest ./backend
          docker push $REGISTRY/$REPOSITORY_BASE-celery-high:latest
          
          # Build and push low priority celery workers
          docker build -f ./backend/Dockerfile.celery-low -t $REGISTRY/$REPOSITORY_BASE-celery-low:latest ./backend
          docker push $REGISTRY/$REPOSITORY_BASE-celery-low:latest
          
          # Build and push celery beat scheduler
          docker build -f ./backend/Dockerfile.celery-beat -t $REGISTRY/$REPOSITORY_BASE-celery-beat:latest ./backend
          docker push $REGISTRY/$REPOSITORY_BASE-celery-beat:latest

      - name: Deploy All Services to ECS
        run: |
          # Deploy main backend
          aws ecs update-service --cluster ${{ github.event.repository.name }}-staging-cluster --service ${{ github.event.repository.name }}-staging-service --force-new-deployment
          
          # Deploy celery services
          aws ecs update-service --cluster ${{ github.event.repository.name }}-staging-cluster --service ${{ github.event.repository.name }}-staging-celery-high-service --force-new-deployment
          aws ecs update-service --cluster ${{ github.event.repository.name }}-staging-cluster --service ${{ github.event.repository.name }}-staging-celery-low-service --force-new-deployment
          aws ecs update-service --cluster ${{ github.event.repository.name }}-staging-cluster --service ${{ github.event.repository.name }}-staging-celery-beat-service --force-new-deployment
