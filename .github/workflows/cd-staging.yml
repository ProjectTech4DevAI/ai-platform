name: Deploy AI Platform to ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write


    steps:
      - name: checkout the repo
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::024209611402:role/github-action-role
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and Push Backend Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}-staging-repo
        run: |
          docker build -t $REGISTRY/$REPOSITORY:staging ./backend
          docker push $REGISTRY/$REPOSITORY:staging

      - name: Build and Push Celery Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}-celery-repo
        run: |
          docker build -f ./backend/Dockerfile.celery -t $REGISTRY/$REPOSITORY:latest ./backend
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Deploy Celery to ECS
        run: |
          # Deploy high priority celery workers
          aws ecs update-service --cluster ${{ github.event.repository.name }}-celery-staging-cluster --service ${{ github.event.repository.name }}-celery-high-staging-service --force-new-deployment
          # Deploy other priority celery workers
          aws ecs update-service --cluster ${{ github.event.repository.name }}-celery-staging-cluster --service ${{ github.event.repository.name }}-celery-other-staging-service --force-new-deployment

      - name: Deploy Backend to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}-staging-repo
        run: |
          # Create deployment script
          cat > deploy-backend.sh << 'EOF'
          #!/bin/bash

          # Stop existing container
          docker stop backend-staging || true
          docker rm backend-staging || true

          # Pull latest image
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $1
          docker pull $1/$2:staging

          # Start backend
          docker run -d --name backend-staging --restart unless-stopped \
            --env-file /home/ubuntu/.env.staging \
            -p 80:80 \
            $1/$2:staging
          EOF

          # Copy script to EC2 and execute
          echo "${{ secrets.EC2_STAGING_PRIVATE_KEY }}" > staging_key.pem
          chmod 600 staging_key.pem
          scp -i staging_key.pem -o StrictHostKeyChecking=no deploy-backend.sh ubuntu@${{ secrets.EC2_STAGING_HOST }}:/tmp/
          ssh -i staging_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_STAGING_HOST }} "chmod +x /tmp/deploy-backend.sh && /tmp/deploy-backend.sh $REGISTRY $REPOSITORY"

      - name: Deploy Flower to ECS
        run: |
          # Deploy Flower monitoring service to ECS
          aws ecs update-service --cluster ${{ github.event.repository.name }}-celery-staging-cluster --service ${{ github.event.repository.name }}-flower-staging-service --force-new-deployment
