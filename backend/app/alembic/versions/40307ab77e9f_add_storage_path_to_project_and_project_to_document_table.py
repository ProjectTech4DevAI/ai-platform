"""add storage_path to project and project_id to document table

Revision ID: 40307ab77e9f
Revises: 8725df286943
Create Date: 2025-08-28 10:54:30.712627

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "40307ab77e9f"
down_revision = "8725df286943"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column("project", sa.Column("storage_path", sa.Uuid(), nullable=True))

    conn = op.get_bind()
    conn.execute(sa.text("UPDATE project SET storage_path = gen_random_uuid()"))

    op.alter_column("project", "storage_path", nullable=False)
    op.create_unique_constraint("uq_project_storage_path", "project", ["storage_path"])

    op.add_column("document", sa.Column("project_id", sa.Integer(), nullable=True))
    op.add_column("document", sa.Column("is_deleted", sa.Boolean(), nullable=True))

    conn.execute(
        sa.text(
            """
        UPDATE document
        SET is_deleted = CASE
            WHEN deleted_at IS NULL THEN false
            ELSE true
        END
    """
        )
    )
    conn.execute(
        sa.text(
            """
        UPDATE document
        SET project_id = (
            SELECT project_id FROM apikey
            WHERE apikey.user_id = document.owner_id
            LIMIT 1
        )
    """
        )
    )

    op.alter_column("document", "is_deleted", nullable=False)
    op.alter_column("document", "project_id", nullable=False)

    op.drop_constraint("document_owner_id_fkey", "document", type_="foreignkey")
    op.create_foreign_key(
        None, "document", "project", ["project_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("document", "owner_id")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_project_storage_path", "project", type_="unique")
    op.drop_column("project", "storage_path")

    op.add_column(
        "document",
        sa.Column("owner_id", sa.Integer(), autoincrement=False, nullable=True),
    )

    conn = op.get_bind()
    # Backfill owner_id from project_id using api_key mapping
    conn.execute(
        sa.text(
            """
        UPDATE document d
        SET owner_id = (
            SELECT user_id
            FROM apikey a
            WHERE a.project_id = d.project_id
            LIMIT 1
        )
    """
        )
    )

    op.alter_column("document", "owner_id", nullable=False)

    op.drop_constraint("document_project_id_fkey", "document", type_="foreignkey")
    op.create_foreign_key(
        "document_owner_id_fkey",
        "document",
        "user",
        ["owner_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("document", "is_deleted")
    op.drop_column("document", "project_id")
    # ### end Alembic commands ###
