version: "3.9"

services:
  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not set}
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB not set}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - kaapi-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: redis
    restart: always
    env_file:
      - .env
    command: >
      sh -c "if [ -n \"${REDIS_PASSWORD}\" ]; then
               redis-server --requirepass \"${REDIS_PASSWORD}\";
             else
               redis-server;
             fi"
    volumes:
      - kaapi-redis:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "if [ -n \"${REDIS_PASSWORD}\" ]; then redis-cli -a \"${REDIS_PASSWORD}\" ping; else redis-cli ping; fi"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:?RABBITMQ_USER not set}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:?RABBITMQ_PASSWORD not set}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:?RABBITMQ_VHOST not set}
    volumes:
      - kaapi-rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    ports:
      - "8080:8080"

  prestart:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    container_name: prestart
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: db
    profiles: ["prestart"]

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG:-latest}"
    container_name: backend
    restart: always
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: db
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    ports:
      - "8000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/v1/utils/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      uv run uvicorn app.main:app --host 0.0.0.0 --port 80 --reload
    develop:
      watch:
        # Sync backend source code into container immediately on change
        - action: sync
          path: ./backend/app
          target: /app/app
        # Rebuild image if dependencies change
        - action: rebuild
          path: ./backend/pyproject.toml
        - action: rebuild
          path: ./backend/uv.lock

  celery_worker:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG:-latest}"
    container_name: celery-worker
    restart: always
    build:
      context: ./backend
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_SERVER: db
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    command: ["uv", "run", "celery", "-A", "app.celery.celery_app", "worker", "--loglevel=info"]

  celery_flower:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG:-latest}"
    container_name: celery-flower
    restart: always
    build:
      context: ./backend
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "5555:5555"
    environment:
      POSTGRES_SERVER: db
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    command: ["uv", "run", "celery", "-A", "app.celery.celery_app", "flower", "--port=5555"]

volumes:
  kaapi-postgres:
  kaapi-redis:
  kaapi-rabbitmq:
