version: "3.9"

services:
  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not set}
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB not set}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - kaapi-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: redis
    restart: always
    env_file:
      - .env
    command: >
      sh -c "if [ -n \"${REDIS_PASSWORD}\" ]; then
               redis-server --requirepass ${REDIS_PASSWORD};
             else
               redis-server;
             fi"
    volumes:
      - kaapi-redis:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "if [ -n \"${REDIS_PASSWORD}\" ]; then redis-cli -a ${REDIS_PASSWORD} ping; else redis-cli ping; fi"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:?RABBITMQ_USER not set}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:?RABBITMQ_PASSWORD not set}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:?RABBITMQ_VHOST not set}
    volumes:
      - kaapi-rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    ports:
      - "8080:8080"

  prestart:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      ENVIRONMENT: ${ENVIRONMENT:?Variable not set}
      SECRET_KEY: ${SECRET_KEY}
      FIRST_SUPERUSER: ${FIRST_SUPERUSER:?Variable not set}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:?Variable not set}
      EMAIL_TEST_USER: ${EMAIL_TEST_USER}

      # Database
      POSTGRES_SERVER: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB:?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER:?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Variable not set}


  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG:-latest}"
    container_name: backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      # General
      DOMAIN: ${DOMAIN}
      ENVIRONMENT: ${ENVIRONMENT:?Variable not set}
      SECRET_KEY: ${SECRET_KEY}
      FIRST_SUPERUSER: ${FIRST_SUPERUSER:?Variable not set}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:?Variable not set}
      EMAIL_TEST_USER: ${EMAIL_TEST_USER}

      # Database
      POSTGRES_SERVER: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB:?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER:?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Variable not set}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # RabbitMQ (Celery Broker)
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}

      # Celery
      CELERY_WORKER_CONCURRENCY: ${CELERY_WORKER_CONCURRENCY}
      CELERY_WORKER_MAX_TASKS_PER_CHILD: ${CELERY_WORKER_MAX_TASKS_PER_CHILD}
      CELERY_WORKER_MAX_MEMORY_PER_CHILD: ${CELERY_WORKER_MAX_MEMORY_PER_CHILD}
      CELERY_TASK_SOFT_TIME_LIMIT: ${CELERY_TASK_SOFT_TIME_LIMIT}
      CELERY_TASK_TIME_LIMIT: ${CELERY_TASK_TIME_LIMIT}
      CELERY_TASK_MAX_RETRIES: ${CELERY_TASK_MAX_RETRIES}
      CELERY_TASK_DEFAULT_RETRY_DELAY: ${CELERY_TASK_DEFAULT_RETRY_DELAY}
      CELERY_RESULT_EXPIRES: ${CELERY_RESULT_EXPIRES}
      CELERY_BROKER_POOL_LIMIT: ${CELERY_BROKER_POOL_LIMIT}
      CELERY_WORKER_PREFETCH_MULTIPLIER: ${CELERY_WORKER_PREFETCH_MULTIPLIER}
      CELERY_ENABLE_UTC: ${CELERY_ENABLE_UTC}
      CELERY_TIMEZONE: ${CELERY_TIMEZONE}

      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_S3_BUCKET_PREFIX: ${AWS_S3_BUCKET_PREFIX}

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Optional
      SENTRY_DSN: ${SENTRY_DSN}
      CALLBACK_CONNECT_TIMEOUT: ${CALLBACK_CONNECT_TIMEOUT}
      CALLBACK_READ_TIMEOUT: ${CALLBACK_READ_TIMEOUT}
    build:
      context: ./backend
    ports:
      - "8000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/v1/utils/health/"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  kaapi-postgres:
  kaapi-redis:
  kaapi-rabbitmq:
